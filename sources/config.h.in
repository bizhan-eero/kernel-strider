#ifndef CONFIG_H_1734_INCLUDED
#define CONFIG_H_1734_INCLUDED
	
/* How many arguments ring_buffer_consume() takes */
#cmakedefine RING_BUFFER_CONSUME_HAS_3_ARGS
#cmakedefine RING_BUFFER_CONSUME_HAS_4_ARGS

/* How to create module parameter with callbacks */
#cmakedefine MODULE_PARAM_CREATE_USE_OPS_STRUCT
#cmakedefine MODULE_PARAM_CREATE_USE_OPS

/* The path where the user-mode helper scripts are located by default */
#define KEDR_UM_HELPER_PATH "@KEDR_UM_HELPER_PATH@"

/* Name and version of the package */
#define KEDR_KS_PACKAGE_NAME "@KEDR_KS_PACKAGE_NAME@"
#define KEDR_KS_PACKAGE_VERSION "@KEDR_KS_PACKAGE_VERSION@"

/* Path to the trace receiver program */
#define KEDR_TRACE_RECEIVER_PATH "@KEDR_TRACE_RECEIVER_PATH@"

/* Specifies whether kmem_cache_alloc*_trace() functions get 'size' as
 * their first argument. */
#cmakedefine KMCA_TRACE_SIZE_FIRST

/* Specifies whether kmem_cache_alloc*_trace() functions get 'kmem_cache *'
 * pointer as their first argument. */
#cmakedefine KMCA_TRACE_KMC_FIRST

/* Specifies whether __alloc_workqueue_key() accepts a variable argument
 * list. Ignored if the function is not present in the system. */
#cmakedefine KEDR_ALLOC_WQ_KEY_VARARG
/* ====================================================================== */

/* If hlist_for_each_entry*() macros accept only 'type *pos' as a loop 
 * cursor, this symbol will be defined. */
#cmakedefine HLIST_FOR_EACH_ENTRY_POS_ONLY

/* Provide our own wrappers for hlist_for_each_entry*() API to hide the
 * change in their interface.
 *
 * pos: 'type *' to use as a loop cursor.
 * n: 'struct hlist_node *' to use as temporary storage
 * head: the head of the list (struct hlist_head *).
 * member: the name of the hlist_node within the struct.
 */
#if defined(HLIST_FOR_EACH_ENTRY_POS_ONLY)
# define kedr_hlist_for_each_entry hlist_for_each_entry
# define kedr_hlist_for_each_entry_safe hlist_for_each_entry_safe

#else

/* Based on the implementation of the changed API in kernel 3.9. */
# define kedr_hlist_entry_safe(ptr, type, member) \
	({ typeof(ptr) ____ptr = (ptr); \
	   ____ptr ? hlist_entry(____ptr, type, member) : NULL; \
	})
	
# define kedr_hlist_for_each_entry(pos, head, member) \
	for (pos = kedr_hlist_entry_safe((head)->first, typeof(*(pos)), member);\
	     pos;							\
	     pos = kedr_hlist_entry_safe((pos)->member.next, typeof(*(pos)), member))

# define kedr_hlist_for_each_entry_safe(pos, n, head, member) 		\
	for (pos = kedr_hlist_entry_safe((head)->first, typeof(*(pos)), member);\
	     pos && ({ n = (pos)->member.next; 1; });			\
	     pos = kedr_hlist_entry_safe(n, typeof(*(pos)), member))
#endif /* defined(HLIST_FOR_EACH_ENTRY_POS_ONLY) */
/* ====================================================================== */

/* Specifies whether random32() is available. */
#cmakedefine KEDR_HAVE_RANDOM32

#if defined(KEDR_HAVE_RANDOM32)
# define kedr_random32() random32()
#else
# define kedr_random32() prandom_u32()
#endif
/* ====================================================================== */

/* Specifies whether request_firmware_nowait() has 7 arguments.*/
#cmakedefine REQUEST_FW_HAS_7_ARGS
/* ====================================================================== */

#endif /* CONFIG_H_1734_INCLUDED */
