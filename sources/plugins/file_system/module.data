module.author = Andrey Tsyvarev
module.license = GPL

header =>>
/* 
 * A plugin to the function handling subsystem that allows to use KEDR-COI
 * to establish needed happens-before links for file systems.
 */

/* ========================================================================
 * Copyright (C) 2012, KEDR development team
 * Authors: 
 *      Eugene A. Shatokhin <spectre@ispras.ru>
 *      Andrey V. Tsyvarev  <tsyvarev@ispras.ru>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 ======================================================================== */

#include <linux/kernel.h> 
#include <linux/module.h>
#include <linux/init.h>
#include <linux/errno.h>
#include <linux/list.h>
#include <linux/slab.h>
#include <linux/fs.h>
#include <linux/cdev.h>

#include <kedr/kedr_mem/core_api.h>
#include <kedr/object_types.h>

#include <kedr-coi/interceptors/file_operations_interceptor.h>

#include "callback_interceptor.h"

#include "file_operations_model.h"
#include "inode_operations_model.h"
#include "super_operations_model.h"
#include "file_system_type_model.h"

#include "fs_interception.h"

#include "cdev_file_operations_interceptor.h"
#include "miscdev_file_operations_interceptor.h"

#include "module_ref_model.h"

#include "fill_super_interceptor.h"

#include "cdev_model.h"
#include "miscdev_model.h"
<<

object.name = fs_interception
object.init = return fs_interception_init();
object.destroy = fs_interception_destroy();

object.name = file_operations_model
object.init = return file_operations_model_connect(&file_operations_interceptor_payload_register);
object.destroy = file_operations_model_disconnect(&file_operations_interceptor_payload_unregister);

object.name = inode_operations_model
object.init = return inode_operations_model_connect(&inode_operations_interceptor_payload_register);
object.destroy = inode_operations_model_disconnect(&inode_operations_interceptor_payload_unregister);

object.name = super_operations_model
object.init = return super_operations_model_connect(&super_operations_interceptor_payload_register);
object.destroy = super_operations_model_disconnect(&super_operations_interceptor_payload_unregister);

object.name = file_system_type_model
object.init = return file_system_type_model_connect(&file_system_type_interceptor_payload_register);
object.destroy = file_system_type_model_disconnect(&file_system_type_interceptor_payload_unregister);


object.name = fill_super_interceptor
object.init = return fill_super_interceptor_init();
object.destroy = fill_super_interceptor_destroy();

object.name = cdev_file_operations_interceptor
object.init =>>
	return cdev_file_operations_interceptor_init(
		&file_operations_interceptor_factory_interceptor_create, NULL);
<<
object.destroy = cdev_file_operations_interceptor_destroy();


object.name = miscdev_file_operations_interceptor
object.init =>>
	return miscdev_file_operations_interceptor_init(
		&file_operations_interceptor_factory_interceptor_create, NULL);
<<
object.destroy = miscdev_file_operations_interceptor_destroy();


################### Filesystem functions interception ######################
[group]
function.name = register_filesystem
returnType = int

arg.type = struct file_system_type*
arg.name = fs

pre =>>
    file_system_type_interceptor_watch(fs);
    /* Relation: File system registration should be happened before its operations are called. */
    kedr_eh_on_signal_pre(tid, pc, FST_MODEL_STATE_PRE_REGISTERED(fs), KEDR_SWT_COMMON);
<<

post =>>
    kedr_eh_on_signal_post(tid, pc, FST_MODEL_STATE_PRE_REGISTERED(fs), KEDR_SWT_COMMON);
    if(returnValue)
		file_system_type_interceptor_forget(fs);
<<

[group]
function.name = unregister_filesystem
returnType = int

arg.type = struct file_system_type*
arg.name = fs

post =>>
    if(returnValue == 0)
		file_system_type_interceptor_forget(fs);
<<

##################### Inode-related functions interception #############

[group]

header =>>
/* Callback types for iget5_locked */
typedef int (*test_inode_t)(struct inode *inode, void *data);
typedef int (*set_inode_t)(struct inode *inode, void *data);
<<


function.name = iget5_locked

returnType = struct inode*

arg.type = struct super_block*
arg.name = sb

arg.type = unsigned long
arg.name = hashval

arg.type = test_inode_t
arg.name = test

arg.type = set_inode_t
arg.name = set

arg.type = void*
arg.name = data
 

pre =>>
	/* Root inode may be created with this function. */
	super_operations_interceptor_watch(sb);
<<


######### mount_*()/get_sb_*() functions interceptor ###################
# Functions which are normally used in mount()/get_sb() file system type operation.

[group]
function.name = get_sb_nodev

returnType = int

arg.type = struct file_system_type*
arg.name = fs_type

arg.type = int
arg.name = flags

arg.type = void*
arg.name = data

arg.type = fill_super_t
arg.name = fill_super

arg.type = struct vfsmount*
arg.name = mnt

pre=>>
	/* Replace callback in function parameter */
	fill_super = fill_super_interceptor_replace(fs_type, fill_super);
<<
post=>>
	/* Forget callback interception */
	fill_super_interceptor_forget(fs_type);
<<


[group]
function.name = get_sb_bdev

returnType = int

arg.type = struct file_system_type*
arg.name = fs_type

arg.type = int
arg.name = flags

arg.type = const char*
arg.name = dev_name

arg.type = void*
arg.name = data

arg.type = fill_super_t
arg.name = fill_super

arg.type = struct vfsmount*
arg.name = mnt

pre=>>
	/* Replace callback in function parameter */
	fill_super = fill_super_interceptor_replace(fs_type, fill_super);
<<
post=>>
	/* Forget callback interception */
	fill_super_interceptor_forget(fs_type);
<<

[group]
function.name = get_sb_single

returnType = int

arg.type = struct file_system_type*
arg.name = fs_type

arg.type = int
arg.name = flags

arg.type = void*
arg.name = data

arg.type = fill_super_t
arg.name = fill_super

arg.type = struct vfsmount*
arg.name = mnt

pre=>>
	/* Replace callback in function parameter */
	fill_super = fill_super_interceptor_replace(fs_type, fill_super);
<<
post=>>
	/* Forget callback interception */
	fill_super_interceptor_forget(fs_type);
<<

################ Character device functions interceptor ################
[group]
function.name = cdev_add

returnType = int

arg.type = struct cdev*
arg.name = p

arg.type = dev_t
arg.name = dev

arg.type = unsigned int
arg.name = count


pre=>>
	/* Watch for the factory object - character device */
	cdev_file_operations_interceptor_watch(p);
	/* First part of emitting PRE_REGISTERED signal */
	kedr_eh_on_signal_pre(tid, pc, CDEV_MODEL_STATE_PRE_REGISTERED(p),
		KEDR_SWT_COMMON);
<<

post=>>
	/* Last part of emitting POST_REGISTERED signal */
	kedr_eh_on_signal_post(tid, pc, CDEV_MODEL_STATE_PRE_REGISTERED(p),
		KEDR_SWT_COMMON);
	
	/* Forget about factory object on fail */
	if(returnValue)
		cdev_file_operations_interceptor_forget(p);
<<

[group]
function.name = cdev_del

arg.type = struct cdev*
arg.name = p

post =>>
	/* Forget about factory object - character device */
	cdev_file_operations_interceptor_forget(p);
	/* This function doesn't constraint file operations execution */
<<

################ Misc device functions interceptor ################
[group]
function.name = misc_register

returnType = int

arg.type = struct miscdevice*
arg.name = misc

pre=>>
	/* Watch for the factory object - misc device */
	miscdev_file_operations_interceptor_watch(misc);
	/* First part of emitting PRE_REGISTERED signal */
	kedr_eh_on_signal_pre(tid, pc, MISCDEV_MODEL_STATE_PRE_REGISTERED(misc),
		KEDR_SWT_COMMON);
<<

post=>>
	/* Last part of emitting POST_REGISTERED signal */
	kedr_eh_on_signal_post(tid, pc, MISCDEV_MODEL_STATE_PRE_REGISTERED(misc),
		KEDR_SWT_COMMON);
	
	/* Forget about factory object on fail */
	if(returnValue)
		miscdev_file_operations_interceptor_forget(misc);
<<

[group]
function.name = misc_deregister

arg.type = struct miscdevice*
arg.name = misc

post =>>
	/* Forget about factory object - misc device */
	miscdev_file_operations_interceptor_forget(misc);
	/* This function doesn't constraint file operations execution */
<<


###################### Process events from core ########################
on_target_load = fs_interception_start();

on_target_unload = fs_interception_stop();

on_before_exit =>>
    /* Relation: all module_put(m) calls should be happened before exit() */
	kedr_eh_on_wait(tid, pc, MODULE_MODEL_STATE_POST_INITIALIZED(m),
		KEDR_SWT_COMMON);
<<