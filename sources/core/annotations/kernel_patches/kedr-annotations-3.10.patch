diff -Naur linux-3.10.24.orig/arch/x86/Kconfig.debug linux-3.10.24.new/arch/x86/Kconfig.debug
--- linux-3.10.24.orig/arch/x86/Kconfig.debug	2013-07-01 02:13:29.000000000 +0400
+++ linux-3.10.24.new/arch/x86/Kconfig.debug	2013-12-23 15:42:48.020448073 +0400
@@ -304,4 +304,21 @@
 
 	  If unsure, say N.
 
+config KEDR_ANNOTATIONS
+	default n
+	bool "Enable annotations to make KEDR tools more accurate"
+	---help---
+	  If selected, special annotations will be enabled in the kernel
+	  that help KEDR tools (the data race detector, in particular) to
+	  produce more accurate results. Technically, the annotations add
+	  function calls in appropriate places. The functions do nothing by
+	  themselves but the calls can be intercepted and processed by KEDR
+	  tools this making some events visible to these tools.
+
+	  The annotations allow KEDR to see more events (e.g. enabling or
+	  disabling of Tx queues in the network drivers, which is usually
+	  done using inline functions) and reduce the number of false alarms.
+
+	  If unsure, say N.
+
 endmenu
diff -Naur linux-3.10.24.orig/arch/x86/kernel/kedr_annotations.c linux-3.10.24.new/arch/x86/kernel/kedr_annotations.c
--- linux-3.10.24.orig/arch/x86/kernel/kedr_annotations.c	1970-01-01 03:00:00.000000000 +0300
+++ linux-3.10.24.new/arch/x86/kernel/kedr_annotations.c	2013-12-23 11:16:53.000000000 +0400
@@ -0,0 +1,70 @@
+/* kedr_annotations.c - definition of the annotation functions used by
+ * KEDR tools. */
+
+/* ========================================================================
+ * Copyright (C) 2013, ROSA Laboratory
+ * Copyright (C) 2012, KEDR development team
+ * Authors: 
+ *      Eugene A. Shatokhin
+ *      Andrey V. Tsyvarev
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published
+ * by the Free Software Foundation.
+ ======================================================================== */
+
+#include <linux/module.h>
+/* ====================================================================== */
+
+/* Notes
+ * 1. 
+ * The volatile annotation IDs are here to prevent the compiler and linker
+ * from merging the functions ("identical code folding"). 
+ * If new types of annotations are added, they must have IDs different
+ * from the previously existing ones, which would make the bodies of the 
+ * functions look different from each other to the linker. 
+ * 
+ * 2.
+ * The empty inline assembly blocks prevent the compiler from optimizing
+ * away the calls to these functions. */
+void noinline
+kedr_annotate_happens_before(unsigned long id)
+{
+	volatile int ann_id = __LINE__;
+	(void)ann_id;
+	(void)id;
+	asm volatile ("");
+}
+EXPORT_SYMBOL(kedr_annotate_happens_before);
+
+void noinline
+kedr_annotate_happens_after(unsigned long id)
+{
+	volatile int ann_id = __LINE__;
+	(void)ann_id;
+	(void)id;
+	asm volatile ("");
+}
+EXPORT_SYMBOL(kedr_annotate_happens_after);
+
+void noinline
+kedr_annotate_memory_acquired(const void *addr, unsigned long size)
+{
+	volatile int ann_id = __LINE__;
+	(void)ann_id;
+	(void)addr;
+	(void)size;
+	asm volatile ("");
+}
+EXPORT_SYMBOL(kedr_annotate_memory_acquired);
+
+void noinline
+kedr_annotate_memory_released(const void *addr)
+{
+	volatile int ann_id = __LINE__;
+	(void)ann_id;
+	(void)addr;
+	asm volatile ("");
+}
+EXPORT_SYMBOL(kedr_annotate_memory_released);
+/* ================================================================ */
diff -Naur linux-3.10.24.orig/arch/x86/kernel/Makefile linux-3.10.24.new/arch/x86/kernel/Makefile
--- linux-3.10.24.orig/arch/x86/kernel/Makefile	2013-07-01 02:13:29.000000000 +0400
+++ linux-3.10.24.new/arch/x86/kernel/Makefile	2013-12-23 15:45:40.893450097 +0400
@@ -103,6 +103,8 @@
 
 obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o
 
+obj-$(CONFIG_KEDR_ANNOTATIONS)	+= kedr_annotations.o
+
 ###
 # 64 bit specific files
 ifeq ($(CONFIG_X86_64),y)
diff -Naur linux-3.10.24.orig/include/linux/kedr_annotations.h linux-3.10.24.new/include/linux/kedr_annotations.h
--- linux-3.10.24.orig/include/linux/kedr_annotations.h	1970-01-01 03:00:00.000000000 +0300
+++ linux-3.10.24.new/include/linux/kedr_annotations.h	2013-12-23 16:35:16.000000000 +0400
@@ -0,0 +1,138 @@
+/* kedr_annotations.h - dynamic annotations that can be used to make the 
+ * analysis more precise. 
+ * The annotations provided here are "dynamic" in a sense that they are not
+ * comments, i.e. they are not ignored by the compiler but rather they 
+ * expand to the appropriate code fragments (function calls in this case). 
+ * These calls do nothing by themselves. When the instrumentation system
+ * processes the target module, it transforms them to generate appropriate 
+ * events.
+ *
+ * To use these annotations, one needs to #include this header in the code 
+ * of the target module and #define CONFIG_KEDR_ANNOTATIONS to a non-zero
+ * value in the compiler options. It is also needed to instruct the
+ * build system of the target module to compile kedr_annotations.c and link
+ * the resuling object file into the target when the target is being built.
+ *
+ * [NB] Enabling annotations for a given part of a kernel module but
+ * disabling them for others is not supported. Either all or none.
+ *
+ * A target module containing such annotations can be used normally
+ * even if KernelStrider is not loaded. */
+
+#ifndef KEDR_ANNOTATIONS_H_1536_INCLUDED
+#define KEDR_ANNOTATIONS_H_1536_INCLUDED
+
+#ifdef CONFIG_KEDR_ANNOTATIONS
+
+#include <linux/compiler.h>
+
+/* Do not use kedr_annotate_*() functions directly to annotate the code,
+ * use KEDR_ANNOTATE_*() instead. */
+void kedr_annotate_happens_before(unsigned long id);
+void kedr_annotate_happens_after(unsigned long id);
+void kedr_annotate_memory_acquired(const void *addr,
+	unsigned long size);
+void kedr_annotate_memory_released(const void *addr);
+
+/* These annotations are similar to ANNOTATE_HAPPENS_BEFORE() and 
+ * ANNOTATE_HAPPENS_AFTER() provided by ThreadSanitizer (see 
+ * http://code.google.com/p/data-race-test/wiki/DynamicAnnotations
+ * for details). 
+ * 
+ * These annotations indicate that the place in the code marked with 
+ * KEDR_ANNOTATE_HAPPENS_BEFORE(id) cannot indeed execute after the place 
+ * marked with KEDR_ANNOTATE_HAPPENS_AFTER() with the same 'id' if execution
+ * of the former is observed first. Such pair of annotations specifies the
+ * so called "happens-before" (or "happened-before") relationship between
+ * these places in the code. For a formal description, see
+ * http://en.wikipedia.org/wiki/Happened-before
+ *
+ * As an example, consider registration of a callback and execution of that
+ * callback. Suppose we have an object and the kernel allows us to register
+ * a function to be called when the state of that object changes somehow:
+ * register_callback(&object, callback_func). Unless we use 'callback_func'
+ * for some other purposes as well, it cannot start executing before 
+ * register_callback() starts executing. This is a happens-before relation.
+ * If the object is not involved in other happens-before relations, we can 
+ * use its address as the ID of this particular relation. 
+ * This way, the place in the code where register_callback() is called, can
+ * be annotated as follows:
+ *	<...>
+ *	KEDR_ANNOTATE_HAPPENS_BEFORE(&object);
+ *	register_callback(&object, callback_func);
+ *	<...>
+ * The matching annotation should be placed at the beginning of 
+ * callback_func() in this case:
+ *	static some_type callback_func(<some arguments>)
+ *	{
+ *		KEDR_ANNOTATE_HAPPENS_AFTER(&object);
+ *		<the rest of the function>
+ *	}
+ * KEDR_ANNOTATE_HAPPENS_BEFORE() should usually be placed right before 
+ * and KEDR_ANNOTATE_HAPPENS_AFTER - right after the relevant locations in 
+ * the code to be annotated.
+ * 
+ * Note that it is not required to use the address of the object as the ID
+ * of the relation. It is only needed that the matching annotations use the 
+ * same ID for the analysis tools to be able to recognize this 
+ * happens-before relation. */
+ 
+/* It seems that nothing prevents the compiler from reordering the 
+ * operations in the code and a function call in some cases. It is safer
+ * to prohibit such reordering explicitly via barrier(). */
+#define KEDR_ANNOTATE_HAPPENS_BEFORE(id) 			\
+	do { 							\
+		barrier();					\
+		kedr_annotate_happens_before((id));		\
+		barrier();					\
+	} while (0)
+	
+#define KEDR_ANNOTATE_HAPPENS_AFTER(id) 			\
+	do { 							\
+		barrier();					\
+		kedr_annotate_happens_after((id));		\
+		barrier();					\
+	} while (0)
+
+/* The following two annotations allow to specify the "lifetime" of a memory
+ * block the target module did not allocate but obtained from some other 
+ * component of the kernel. 
+ * For example, it can be convenient to annotate 'struct file' passed to 
+ * the file operation callbacks as if it was allocated in open() and 
+ * deallocated in release(). This allows to avoid confusion in case the 
+ * memory occupied by the 'struct file' is reused after the structure has 
+ * been destroyed. 
+ * 
+ * KEDR_ANNOTATE_MEMORY_ACQUIRED(addr, size) marks the memory area 
+ * [addr, addr + size) as allocated ("the memory area has been made 
+ * available to this module"). 
+ * KEDR_ANNOTATE_MEMORY_RELEASED(addr) marks the memory area starting at 
+ * 'addr' as deallocated ("the memory area is no longer available to this
+ * module"). 
+ * 
+ * Note that KEDR_ANNOTATE_MEMORY_ACQUIRED(addr, size) should always be
+ * paired with KEDR_ANNOTATE_MEMORY_RELEASED(addr) with the same 'addr'. */
+#define KEDR_ANNOTATE_MEMORY_ACQUIRED(addr, size) 		\
+	do { 							\
+		barrier();					\
+		kedr_annotate_memory_acquired((addr), (size)); 	\
+		barrier();					\
+	} while (0)
+#define KEDR_ANNOTATE_MEMORY_RELEASED(addr) 			\
+	do { 							\
+		barrier();					\
+		kedr_annotate_memory_released((addr));		\
+		barrier();					\
+	} while (0)
+
+#else /* CONFIG_KEDR_ANNOTATIONS is not defined */
+
+/* Define the annotations as no-ops. */
+#define KEDR_ANNOTATE_HAPPENS_BEFORE(obj) do { } while (0)
+#define KEDR_ANNOTATE_HAPPENS_AFTER(obj) do { } while (0)
+#define KEDR_ANNOTATE_MEMORY_ACQUIRED(addr, size) do { } while (0)
+#define KEDR_ANNOTATE_MEMORY_RELEASED(addr) do { } while (0)
+
+#endif /* CONFIG_KEDR_ANNOTATIONS != 0 */
+
+#endif /* KEDR_ANNOTATIONS_H_1536_INCLUDED */
diff -Naur linux-3.10.24.orig/include/linux/netdevice.h linux-3.10.24.new/include/linux/netdevice.h
--- linux-3.10.24.orig/include/linux/netdevice.h	2013-07-01 02:13:29.000000000 +0400
+++ linux-3.10.24.new/include/linux/netdevice.h	2013-12-23 17:52:03.722538843 +0400
@@ -51,6 +51,8 @@
 #include <linux/neighbour.h>
 #include <uapi/linux/netdevice.h>
 
+#include <linux/kedr_annotations.h>
+
 struct netpoll_info;
 struct device;
 struct phy_device;
@@ -458,6 +460,8 @@
 	while (test_and_set_bit(NAPI_STATE_SCHED, &n->state))
 		msleep(1);
 	clear_bit(NAPI_STATE_DISABLE, &n->state);
+
+	KEDR_ANNOTATE_HAPPENS_AFTER((unsigned long)n + 1);
 }
 
 /**
@@ -469,6 +473,8 @@
  */
 static inline void napi_enable(struct napi_struct *n)
 {
+	KEDR_ANNOTATE_HAPPENS_BEFORE((unsigned long)n);
+
 	BUG_ON(!test_bit(NAPI_STATE_SCHED, &n->state));
 	smp_mb__before_clear_bit();
 	clear_bit(NAPI_STATE_SCHED, &n->state);
@@ -487,6 +493,8 @@
 {
 	while (test_bit(NAPI_STATE_SCHED, &n->state))
 		msleep(1);
+
+	KEDR_ANNOTATE_HAPPENS_AFTER((unsigned long)n + 1);
 }
 #else
 # define napi_synchronize(n)	barrier()
@@ -1845,6 +1853,8 @@
 
 static inline void netif_tx_start_queue(struct netdev_queue *dev_queue)
 {
+	KEDR_ANNOTATE_HAPPENS_BEFORE((unsigned long)dev_queue);
+	
 	clear_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
 }
 
@@ -1877,6 +1887,8 @@
 		return;
 	}
 #endif
+	KEDR_ANNOTATE_HAPPENS_BEFORE((unsigned long)dev_queue);
+	
 	if (test_and_clear_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state))
 		__netif_schedule(dev_queue->qdisc);
 }
@@ -1910,6 +1922,8 @@
 		return;
 	}
 	set_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
+
+	KEDR_ANNOTATE_HAPPENS_AFTER((unsigned long)dev_queue + 1);
 }
 
 /**
@@ -2116,6 +2130,8 @@
 	if (netpoll_trap())
 		return;
 #endif
+	KEDR_ANNOTATE_HAPPENS_BEFORE((unsigned long)txq);
+	
 	if (test_and_clear_bit(__QUEUE_STATE_DRV_XOFF, &txq->state))
 		__netif_schedule(txq->qdisc);
 }
