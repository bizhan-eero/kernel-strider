/* core_impl.h - Implementation-specific declarations for the core. */

#ifndef CORE_IMPL_H_1628_INCLUDED
#define CORE_IMPL_H_1628_INCLUDED

#include <linux/bug.h> /* BUG_ON */
#include <linux/list.h>

#include <kedr/kedr_mem/core_api.h>
#include <kedr/kedr_mem/local_storage.h>
#include <kedr/asm/insn.h> /* instruction analysis facilities */

/* The prefix for diagnostic messages. */
#ifndef KEDR_MSG_PREFIX
#define KEDR_MSG_PREFIX "@KEDR_MSG_PREFIX@"
#endif

/* Name of the directory to be created in debugfs for the core */
#define KEDR_DEBUGFS_DIR "@KEDR_MEM_CORE_DEBUGFS_DIR@"

/* The file in the directory for the core in debugfs where the helper
 * script should write the information about the sections of the target
 * module. */
#define KEDR_SECTIONS_FILE "@KEDR_MEM_CORE_SECTIONS_FILE@"

/* The object containing session-specific data */
extern struct kedr_session session;

/* The mutex to serialize operations with the session-specific data. */
extern struct mutex session_mutex;

/* The current set of event handlers. Should never be NULL. */
struct kedr_event_handlers;
extern struct kedr_event_handlers *eh_current;

/* The current allocator for local storage instances. 
 * Should never be NULL. */
struct kedr_ls_allocator;
extern struct kedr_ls_allocator *ls_allocator;

/* The current set of core hooks. Should never be NULL. */
struct kedr_core_hooks;
extern struct kedr_core_hooks *core_hooks;

/* Path where the user-mode helper scripts are located. Normally, the user
 * would not change it, it is mainly for testing purposes. */
extern char *umh_dir;

/* This parameter specifies whether to report memory events for stack 
 * accesses. */
extern int process_stack_accesses;

/* This parameter specifies whether to report memory events for the accesses
 * to the user-space memory. */
extern int process_um_accesses;

/* This parameter controls event sampling. */
extern unsigned int sampling_rate;

/* Total number of blocks containing potential memory accesses and the 
 * number of blocks skipped because of sampling, respectively. */
extern size_t blocks_total;
extern size_t blocks_skipped;
/* ====================================================================== */

static inline void
kedr_eh_on_session_start(void)
{
	if (eh_current->on_session_start != NULL)
		eh_current->on_session_start(eh_current);
}

static inline void
kedr_eh_on_session_end(void)
{
	if (eh_current->on_session_end != NULL)
		eh_current->on_session_end(eh_current);
}

static inline void
kedr_eh_on_target_loaded(struct module *target_module)
{
	if (eh_current->on_target_loaded != NULL)
		eh_current->on_target_loaded(eh_current, target_module);
}

static inline void
kedr_eh_on_target_about_to_unload(struct module *target_module)
{
	if (eh_current->on_target_about_to_unload != NULL)
		eh_current->on_target_about_to_unload(eh_current, 
			target_module);
}

static inline void
kedr_eh_on_function_entry(unsigned long tid, unsigned long func)
{
	if (eh_current->on_function_entry != NULL)
		eh_current->on_function_entry(eh_current, tid, func);
}

static inline void
kedr_eh_on_function_exit(unsigned long tid, unsigned long func)
{
	if (eh_current->on_function_exit != NULL)
		eh_current->on_function_exit(eh_current, tid, func);
}

static inline void
kedr_eh_on_call_pre(unsigned long tid, unsigned long pc, unsigned long func)
{
	if (eh_current->on_call_pre != NULL)
		eh_current->on_call_pre(eh_current, tid, pc, func);
}

static inline void
kedr_eh_on_call_post(unsigned long tid, unsigned long pc, 
	unsigned long func)
{
	if (eh_current->on_call_post != NULL)
		eh_current->on_call_post(eh_current, tid, pc, func);
}

static inline void
kedr_eh_on_io_mem_op_pre(unsigned long tid, unsigned long pc, 
	void **pdata)
{
	if (eh_current->on_io_mem_op_pre != NULL)
		eh_current->on_io_mem_op_pre(eh_current, tid, pc, pdata);
}

static inline void
kedr_eh_on_io_mem_op_post(unsigned long tid, unsigned long pc, 
	unsigned long addr, unsigned long size, 
	enum kedr_memory_event_type type, void *data)
{
	if (eh_current->on_io_mem_op_post != NULL)
		eh_current->on_io_mem_op_post(eh_current, tid, pc, addr, 
			size, type, data);
}

static inline void
kedr_eh_on_memory_barrier_pre(unsigned long tid, unsigned long pc, 
	enum kedr_barrier_type type)
{
	if (eh_current->on_memory_barrier_pre != NULL)
		eh_current->on_memory_barrier_pre(eh_current, tid, pc, 
			type);
}

static inline void
kedr_eh_on_memory_barrier_post(unsigned long tid, unsigned long pc, 
	enum kedr_barrier_type type)
{
	if (eh_current->on_memory_barrier_post != NULL)
		eh_current->on_memory_barrier_post(eh_current, tid, pc, 
			type);
}

/* "barrier pre" + "barrier post" */
static inline void
kedr_eh_on_memory_barrier(unsigned long tid, unsigned long pc, 
	enum kedr_barrier_type type)
{
	kedr_eh_on_memory_barrier_pre(tid, pc, type);
	kedr_eh_on_memory_barrier_post(tid, pc, type);
}
/* ====================================================================== */
#endif /* CORE_IMPL_H_1628_INCLUDED */
