#!/bin/sh

########################################################################
# This test checks that the modules with the init area that contains no
# code (only) data, are handled correctly.
#
# Usage:
#   sh test_no_code.sh
########################################################################

# Just in case the tools like lsmod are not in their usual location.
export PATH=$PATH:/sbin:/bin:/usr/bin

########################################################################
# A function to check prerequisites: whether the necessary files exist,
# etc.
########################################################################
checkPrereqs()
{
	if test ! -f "${CORE_MODULE}"; then
		printf "The core module is missing: ${CORE_MODULE}\n"
		exit 1
	fi

	if test ! -f "${TARGET_MODULE}"; then
		printf "The target module is missing: ${TARGET_MODULE}\n"
		exit 1
	fi
}

########################################################################
cleanupTargets()
{
	printf "Cleaning up the target...\n"

	lsmod | grep "${TARGET_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${TARGET_NAME}"
	fi
}

########################################################################
# Cleanup function
########################################################################
cleanupAll()
{
	cd "${WORK_DIR}"

	cleanupTargets

	lsmod | grep "${CORE_MODULE_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${CORE_MODULE_NAME}"
	fi

	umount "${TEST_DEBUGFS_DIR}"
}

########################################################################
loadTarget()
{
	insmod "${TARGET_MODULE}"
	if test $? -ne 0; then
		printf "Failed to load the target module: ${TARGET_MODULE}\n"
		cleanupAll
		exit 1
	fi
}

unloadTarget()
{
	lsmod | grep "${TARGET_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${TARGET_NAME}"
		if test $? -ne 0; then
			printf "Failed to unload the module: ${TARGET_NAME}\n"
			cleanupAll
			exit 1
		fi
	fi
}

########################################################################
checkLoadedTargets()
{
	printf "Loaded targets: \n"
	cat "${TEST_DEBUGFS_TARGETS_FILE}" | sort | sed -e 's/^/	/'

	cat "${TEST_DEBUGFS_TARGETS_FILE}" | sort | tr "\n" " " | sed -e 's/ $//' > "${TEST_LOADED_FILE}"
	if test $? -ne 0; then
		printf "Failed to read the list of loaded targets from "
		printf "${TEST_DEBUGFS_TARGETS_FILE}\n"
		cleanupAll
		exit 1
	fi

	target_str=$(cat "${TEST_LOADED_FILE}")
	if test "t${target_str}" != "t$1"; then
		printf "The list of targets differs from the expected one (\"$1\")\n"
		cleanupAll
		exit 1
	fi
}

########################################################################
# doTest() - perform the test
########################################################################
doTest()
{
	insmod "${CORE_MODULE}" \
		targets="${TARGET_NAME}" 
	if test $? -ne 0; then
		printf "Failed to load the core module: ${CORE_MODULE}\n"
		cleanupAll
		exit 1
	fi

	printf "Checkpoint 01\n"
	checkLoadedTargets "none"

	loadTarget

	printf "Checkpoint 02\n"
	checkLoadedTargets "test_no_code"

	unloadTarget

	# Unload the remaining modules, they are no longer needed
	rmmod "${CORE_MODULE_NAME}"
	if test $? -ne 0; then
		printf "Failed to unload the core module.\n"
		cleanupAll
		exit 1
	fi
}

########################################################################
# main
########################################################################
WORK_DIR=${PWD}

if test $# -ne 0; then
	printf "Usage: sh $0\n"
	exit 1
fi

CORE_MODULE_NAME="@CORE_MODULE_NAME@"
CORE_MODULE="@CORE_MODULE_DIR@/${CORE_MODULE_NAME}.ko"

TARGET_NAME="test_no_code"
TARGET_MODULE="@CMAKE_CURRENT_BINARY_DIR@/test_no_code/${TARGET_NAME}.ko"

TEST_TMP_DIR="@KEDR_TEST_TEMP_DIR@"
TEST_DEBUGFS_DIR="${TEST_TMP_DIR}/debug"
TEST_DEBUGFS_TARGETS_FILE="${TEST_DEBUGFS_DIR}/kedr_mem_core/loaded_targets"
TEST_LOADED_FILE="${TEST_TMP_DIR}/loaded.txt"

rm -rf "${TEST_TMP_DIR}"
mkdir -p "${TEST_DEBUGFS_DIR}"
if test $? -ne 0; then
	printf "Failed to create ${TEST_DEBUGFS_DIR}\n"
	exit 1
fi

checkPrereqs

mount -t debugfs none "${TEST_DEBUGFS_DIR}"
if test $? -ne 0; then
	printf "Failed to mount debugfs to ${TEST_DEBUGFS_DIR}\n"
	cleanupAll
	exit 1
fi

doTest

cleanupAll

# test passed
exit 0
