/*
 * Read trace generated by KEDR.
 */

#ifndef KEDR_TRACE_READER_H
#define KEDR_TRACE_READER_H

#include <kedr/ctf_reader/ctf_reader.h>

class KEDRTraceReader : public CTFReader
{
public:
	/* Read trace from given directory */
	KEDRTraceReader(const std::string& dirname);
	
	/* Iterator through events */
	class EventIterator;
	
	//TODO: getters for common parameters/variable values
private:
	std::string dirname;
	/* Standard filestream with refcount support. Used in event iterator */
	class KEDRStream;
	
	/* Taken from the corresponded trace parameter */
	uint64_t time_precision;

	/* 
	 * Return true if event1 from stream1 is older
	 * than event2 from stream2. */
	static bool isEventOlder(Event& event1, KEDRStream& stream1,
		Event& event2, KEDRStream& stream2);
};

class KEDRTraceReader::EventIterator
{
public:
    /* Create past-the-end iterator*/
    EventIterator();
    /* Create iterator points to the first event in the trace */
    EventIterator(KEDRTraceReader& traceReader);
    
    EventIterator(const EventIterator& eventIterator);
    
    ~EventIterator(void);

    EventIterator& operator=(const EventIterator& iter);

    /*
     * Clone iterator.
     *
     * Created iterator may be used independently from given one.
     */
    EventIterator clone(void) const;
    
    /* Common iterator declarations and methods */
    typedef int                         difference_type;
    typedef std::forward_iterator_tag   iterator_category;
    typedef Event                       value_type;
    typedef Event&                      reference_type;
    typedef Event*                      pointer_type;

    /* Iterators are compared via their bool representation */
    operator bool(void) const
		{ return !streamEvents.empty();}

    reference_type operator*(void) const
		{return *streamEvents.back().first;}
    pointer_type operator->(void) const
		{return streamEvents.back().first;}

    EventIterator& operator++(void);

private:
	/* 
	 * Current events from each stream, ordered by timestamps
	 * (last is the oldest one).
	 */
    std::vector<std::pair<Event*, KEDRStream*> > streamEvents;
    
    /* 
     * Reorder last element, if needed.
     *
     * Expects that all elements before the last one are ordered.
     */
    void reorderLast(void);
};

#endif /* KEDR_TRACE_READER_H */