[group]
	# Name of the target function
	function.name = cdev_del
	
	code.pre =>>
	struct cdev *p;
	struct kedr_data_cdev_del *data;
	
	p = (struct cdev *)KEDR_LS_ARG1(ls);
	
	/* Save the data for later use (cdev_del() may make
	 * these unavailable). */
	data = kzalloc(sizeof(*data), GFP_KERNEL);
	if (data != NULL) {
		data->mj = MAJOR(p->dev);
		data->mn = MINOR(p->dev);
		data->count = p->count;
	}
	else {
		pr_warning(KEDR_MSG_PREFIX 
			"cdev_del.pre: out of memory.\n");
	}
	ls->data = (unsigned long)data;
	<<
	
	code.post =>>
	unsigned int i;
	struct kedr_cdev_hb_id *item;
	struct kedr_data_cdev_del *data = 
		(struct kedr_data_cdev_del *)ls->data;
	struct kedr_event_handlers *eh;
	struct kedr_call_info *info = (struct kedr_call_info *)(ls->info);
	unsigned long pc;
	unsigned long tid;
	
	pc = info->pc;
	tid = ls->tid;
	eh = kedr_get_event_handlers();
	
	/* The cdev structure could have been altered by now,
	 * it is safer to use the data saved in the pre handler. */
	if (data != NULL) {
		for (i = 0; i < data->count; ++i) {
			item = kedr_find_ids_for_cdev(data->mj, 
				data->mn + i);
			if (item == NULL) {
				pr_warning(KEDR_MSG_PREFIX 
	"cdev_del.post: not found ID for the device (%u, %u)\n", 
					data->mj, data->mn + i);
				continue;
			}
			kedr_trigger_end_exit_wait_events(eh, tid, pc, item);	
		}
		kfree(data);
	}
	
	/* [NB] We do not bother resetting the handlers when 
	 * cdev_del() is called. Currently, this is acceptable. */
	<<
#######################################################################
