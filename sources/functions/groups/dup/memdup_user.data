[group]
	# Name of the target function
	function.name = memdup_user
	
	prepare_args.pre =>>
		size = KEDR_LS_ARG2(ls);
	<<
	
	prepare_args.post =>>
		size = KEDR_LS_ARG2(ls);
		addr = KEDR_LS_RET_VAL(ls);
		if (IS_ERR((void *)addr))
			addr = 0;
	<<
	
	aux_code.post =>>
		/* Record the copying. */
		void *data = NULL;
		unsigned long src_addr = KEDR_LS_ARG1(ls);
		
		size = KEDR_LS_ARG2(ls);
		addr = KEDR_LS_RET_VAL(ls);
		if (IS_ERR((void *)addr))
			addr = 0;
		
		if (src_addr != 0 && addr != 0 && size != 0) {
			kedr_eh_begin_memory_events(ls->tid, 2, &data);
			kedr_eh_on_memory_event(ls->tid, info->pc, src_addr, 
				size, KEDR_ET_MREAD, data);
			kedr_eh_on_memory_event(ls->tid, info->pc, addr, 
				size, KEDR_ET_MWRITE, data);
			kedr_eh_end_memory_events(ls->tid, data);
		}
	<<
#######################################################################
