[group]
	# Name of the target function
	function.name = kstrdup
	
	prepare_args.pre =>>
		const char *src = (const char *)KEDR_LS_ARG1(ls);
		/* [NB] kstrdup(NULL, ...) still happens sometimes. */
		if (src != NULL)
			size = (unsigned long)strlen(src) + 1;
		else 
			size = 0;
		
		/* Store 'size' in the local storage for later use to
		 * avoid calling strlen() each time. */
		ls->data = size;
	<<
	
	prepare_args.post =>>
		size = ls->data;
		addr = KEDR_LS_RET_VAL(ls);
	<<
	
	aux_code.post =>>
		/* Record the copying. */
		void *data = NULL;
		unsigned long src_addr = KEDR_LS_ARG1(ls);
		
		size = ls->data;
		addr = KEDR_LS_RET_VAL(ls);
		
		if (src_addr != 0 && addr != 0 && size != 0) {
			if (eh->begin_memory_events != NULL)
				eh->begin_memory_events(eh, ls->tid, 2, 
					&data);
			
			if (eh->on_memory_event != NULL) {
				eh->on_memory_event(eh, ls->tid, info->pc, 
					src_addr, size, KEDR_ET_MREAD, data);
				eh->on_memory_event(eh, ls->tid, info->pc, 
					addr, size, KEDR_ET_MWRITE, data);
			}

			if (eh->end_memory_events != NULL)
				eh->end_memory_events(eh, ls->tid, data);
		}
	<<
#######################################################################
