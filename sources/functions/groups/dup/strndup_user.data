[group]
	# Name of the target function
	function.name = strndup_user
	
	prepare_args.pre =>>
		const char *src = (const char *)KEDR_LS_ARG1(ls);
		size_t max_len = (size_t)KEDR_LS_ARG2(ls);
		
		if (src != NULL)
			size = (unsigned long)strnlen_user(src, max_len) + 1;
		else 
			size = 0;
		
		/* Store 'size' in the local storage for later use */
		ls->data = size;
	<<
	
	prepare_args.post =>>
		size = ls->data;
		addr = KEDR_LS_RET_VAL(ls);
		if (IS_ERR((void *)addr))
			addr = 0;
	<<
	
	aux_code.post =>>
		/* Record the copying. */
		void *data = NULL;
		unsigned long src_addr = KEDR_LS_ARG1(ls);
		
		size = ls->data;
		addr = KEDR_LS_RET_VAL(ls);
		if (IS_ERR((void *)addr))
			addr = 0;
		
		if (src_addr != 0 && addr != 0) {
			if (eh->begin_memory_events != NULL)
				eh->begin_memory_events(eh, ls->tid, 2, &data);
			
			if (eh->on_memory_event != NULL) {
				eh->on_memory_event(eh, ls->tid, info->pc, 
					src_addr, size, KEDR_ET_MREAD, data);
				eh->on_memory_event(eh, ls->tid, info->pc, 
					addr, size, KEDR_ET_MWRITE, data);
			}

			if (eh->end_memory_events != NULL)
				eh->end_memory_events(eh, ls->tid, data);
		}
	<<
#######################################################################
