#!/bin/sh

########################################################################
# This test checks that the correct events are generated for the calls
# to the particular functions.
# 
# Usage: 
#   sh test.sh <target_function>
########################################################################

# Just in case the tools like lsmod are not in their usual location.
export PATH=$PATH:/sbin:/bin:/usr/bin

########################################################################
# A function to check prerequisites: whether the necessary files exist,
# etc.
########################################################################
checkPrereqs()
{
	if test ! -f "${CORE_MODULE}"; then
		printf "The core module is missing: ${CORE_MODULE}\n"
		exit 1
	fi

	if test ! -f "${FH_MODULE}"; then
		printf "The module implementing function handlers is missing: ${FH_MODULE}\n"
		exit 1
	fi
	
	if test ! -f "${REPORTER_MODULE}"; then
		printf "The \"trace reporter\" module is missing: ${REPORTER_MODULE}\n"
		exit 1
	fi
		
	if test ! -f "${TARGET_MODULE}"; then
		printf "The target module is missing: ${TARGET_MODULE}\n"
		exit 1
	fi
}

########################################################################
# Cleanup function
########################################################################
cleanupAll()
{
	cd "${WORK_DIR}"
	
	lsmod | grep "${TARGET_MODULE_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${TARGET_MODULE_NAME}"
	fi

	lsmod | grep "${REPORTER_MODULE_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${REPORTER_MODULE_NAME}"
	fi

	lsmod | grep "${FH_MODULE_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${FH_MODULE_NAME}"
	fi
	
	lsmod | grep "${CORE_MODULE_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${CORE_MODULE_NAME}"
	fi
}

########################################################################
# doTest() - perform the actual testing
########################################################################
doTest()
{
	insmod "${CORE_MODULE}" \
		targets="${TARGET_MODULE_NAME}" || exit 1

	insmod "${REPORTER_MODULE}" \
		target_function="trigger_${TARGET_FUNCTION}" \
		target_module="${TARGET_MODULE_NAME}" \
		report_calls=1 report_mem=1 report_block_enter=0 \
		report_load=0 resolve_symbols=0
	if test $? -ne 0; then
		printf "Failed to load the module: ${REPORTER_MODULE_NAME}\n"
		cleanupAll
		exit 1
	fi
	
	insmod "${FH_MODULE}"
	if test $? -ne 0; then
		printf "Failed to load the module: ${FH_MODULE_NAME}\n"
		cleanupAll
		exit 1
	fi

	insmod "${TARGET_MODULE}" target_function=${TARGET_FUNCTION}
	if test $? -ne 0; then
		printf "Failed to load the target module: ${TARGET_MODULE_NAME}\n"
		cleanupAll
		exit 1
	fi
	
	# Unload the target.
	rmmod "${TARGET_MODULE_NAME}"
	if test $? -ne 0; then
		printf "Failed to unload the target module: ${TARGET_MODULE_NAME}\n"
		cleanupAll
		exit 1
	fi

	mount -t debugfs none "${TEST_DEBUGFS_DIR}"
	if test $? -ne 0; then
		printf "Failed to mount debugfs to ${TEST_DEBUGFS_DIR}\n"
		cleanupAll
		exit 1
	fi
	
	# Get the trace.
	cat "${TEST_DEBUGFS_FILE}" > "${TEST_TRACE_FILE}"
	if test $? -ne 0; then
		printf "Failed to read data from the output file in debugfs: "
		printf "${TEST_DEBUGFS_FILE}\n"
		umount "${TEST_DEBUGFS_DIR}"
		cleanupAll
		exit 1
	fi
	umount "${TEST_DEBUGFS_DIR}"
	
	# Unload the remaining modules, they are no longer needed
	rmmod "${REPORTER_MODULE_NAME}"
	if test $? -ne 0; then
		printf "Failed to unload the module: ${REPORTER_MODULE_NAME}\n"
		cleanupAll
		exit 1
	fi
	
	rmmod "${FH_MODULE_NAME}"
	if test $? -ne 0; then
		printf "Failed to unload the module: ${FH_MODULE_NAME}\n"
		cleanupAll
		exit 1
	fi

	rmmod "${CORE_MODULE_NAME}" || exit 1
	
	printf "Checking the trace in ${TEST_TRACE_FILE}.\n"
	if test -n "${TEST_CHECKER_SCRIPT}"; then
		sh "${TEST_CHECKER_SCRIPT}" "${TARGET_FUNCTION}" "${TEST_TRACE_FILE}"
		if test $? -ne 0; then
			# The script should have already reported the error.
			exit 1
		fi
	else 
		cat "${TEST_TRACE_FILE}" | tr -d '\n' | grep -E '@TEST_MATCH_EXPR@' > /dev/null
		if test $? -ne 0; then
			printf "No matching substring has been found in the trace for the "
			printf "expression \"@TEST_MATCH_EXPR@\".\n"
			exit 1
		fi 
	fi
	printf "The trace is OK.\n"
}
########################################################################
# main
########################################################################
WORK_DIR=${PWD}

if test $# -ne 1; then
	printf "Usage: sh $0 <target_function>\n"
	exit 1
fi

TARGET_FUNCTION=$1

CORE_MODULE_NAME="@CORE_MODULE_NAME@"
CORE_MODULE="@CORE_MODULE_DIR@/${CORE_MODULE_NAME}.ko"

REPORTER_MODULE_NAME="kedr_test_reporter"
REPORTER_MODULE="@CMAKE_BINARY_DIR@/core/tests/reporter/${REPORTER_MODULE_NAME}.ko"

FH_MODULE_NAME="kedr_fh_drd_@PLUGIN_SHORT_NAME@"
FH_MODULE="@CMAKE_BINARY_DIR@/functions/common/${FH_MODULE_NAME}.ko"

TARGET_MODULE_NAME="test_fh_drd_@PLUGIN_SHORT_NAME@_@GROUP_NAME@"
TARGET_MODULE="@CMAKE_CURRENT_BINARY_DIR@/${TARGET_MODULE_NAME}.ko"

TEST_TMP_DIR="@KEDR_TEST_PREFIX_TEMP@/functions/@PLUGIN_SHORT_NAME@/@GROUP_NAME@/${TARGET_FUNCTION}"
TEST_DEBUGFS_DIR="${TEST_TMP_DIR}/debug"
TEST_DEBUGFS_FILE="${TEST_DEBUGFS_DIR}/kedr_test_reporter/output"
TEST_TRACE_FILE="${TEST_TMP_DIR}/trace.txt"

# A shell script to check the results. If not specified (empty), this
# test scenario will try to just match TEST_MATCH_EXPR against the 
# trace.
TEST_CHECKER_SCRIPT="@TEST_CHECKER_SCRIPT@"

if test -z "${TEST_CHECKER_SCRIPT}"; then
	if test -z "@TEST_MATCH_EXPR@"; then
		printf "The expression to be matched is empty.\n"
		exit 1
	fi
fi

rm -rf "${TEST_TMP_DIR}"
mkdir -p "${TEST_DEBUGFS_DIR}"
if test $? -ne 0; then
	printf "Failed to create ${TEST_DEBUGFS_DIR}\n"
	exit 1
fi

checkPrereqs

# A checker script may make use of these environment variables. This allows
# to provide the script "as is", without the need to configure them to
# insert these paths there.
export CMAKE_BINARY_DIR="@CMAKE_BINARY_DIR@"
export CMAKE_SOURCE_DIR="@CMAKE_SOURCE_DIR@"

doTest

# just in case
cleanupAll

# test passed
exit 0
