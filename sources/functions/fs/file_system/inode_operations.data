model.name = inode_operations_model
sw_id.prefix = INODE_MODEL_STATE

header =>>
/* ========================================================================
 * Copyright (C) 2012, KEDR development team
 * Authors: 
 *      Eugene A. Shatokhin <spectre@ispras.ru>
 *      Andrey V. Tsyvarev  <tsyvarev@ispras.ru>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 ======================================================================== */


#include <linux/fs.h>


/* 
 * Wrappers for modelling operations with inode mutex
 * (see Linux kernel Documentation/filesystems/Locking).
 */
static inline void i_mutex_lock(unsigned long tid, unsigned long pc,
	struct inode* inode)
{
	kedr_eh_on_lock(tid, pc, (unsigned long)&inode->i_mutex,
		KEDR_LT_MUTEX);
}

static inline void i_mutex_unlock(unsigned long tid, unsigned long pc,
	struct inode* inode)
{
	kedr_eh_on_unlock(tid, pc, (unsigned long)&inode->i_mutex,
		KEDR_LT_MUTEX);
}

<<

implementation_header=>>
/* Only need for define macros, which affects on operations existence */
#include <kedr-coi/interceptors/inode_operations_interceptor.h>
/* States of dentry */
#include "dentry_operations_model.h"
<<

object.type = struct inode
object.operations_field = i_op

operations.type = struct inode_operations

object.state.value = INITIALIZED

object.state.pre_id = &obj->i_sb_list
object.state.post_id = &obj->i_dentry

object.state.value = ALLOCATED

object.state.pre_id = &obj->i_list
object.state.post_id = &obj->i_sb


[group]
operation.name = create
operation.returnType = int

operation.arg.type = struct inode *
operation.arg.name = dir

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = int
operation.arg.name = mode

operation.arg.type = struct nameidata *
operation.arg.name = nd

operation.object = dir

operation.state.value = INITIALIZED


operation.code.pre=>>
	i_mutex_lock(tid, pc, dir);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, dir);
<<

# Default implementation doesn't change state, but there is no template
# of state transition without external interception.

# State transition of inode created
operation.external.state.transition.prefix = INODE_MODEL_STATE
operation.external.state.transition.object = dentry->d_inode
operation.external.state.transition.pre_value = 
operation.external.state.transition.post_value = INITIALIZED
operation.external.state.transition.condition = returnValue == 0

# State transition of dentry on which inode is created
operation.external.state.transition.prefix = DENTRY_MODEL_STATE
operation.external.state.transition.object = dentry
operation.external.state.transition.pre_value = NEGATIVE
operation.external.state.transition.post_value = POSITIVE
operation.external.state.transition.condition = returnValue == 0


[group]
operation.name = lookup
operation.returnType = struct dentry *

operation.arg.type = struct inode *
operation.arg.name = inode

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = struct nameidata *
operation.arg.name = nd

operation.object = inode

operation.state.value = INITIALIZED

operation.code.pre=>>
	/* 
	 * Called with dentry which is just allocated.
	 */
	kedr_eh_on_alloc(tid, pc, sizeof(struct dentry), (unsigned long)dentry);

	i_mutex_lock(tid, pc, inode);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, inode);
	
	if(IS_ERR(returnValue))
		kedr_eh_on_free(tid, pc, (unsigned long)dentry);
<<

# State transition of inode found
operation.external.state.transition.prefix = INODE_MODEL_STATE
operation.external.state.transition.object = dentry->d_inode
operation.external.state.transition.pre_value = 
operation.external.state.transition.post_value = INITIALIZED
operation.external.state.transition.condition = !returnValue && dentry->d_inode

# State transition of inode found new
operation.external.state.transition.prefix = INODE_MODEL_STATE
operation.external.state.transition.object = returnValue->d_inode
operation.external.state.transition.pre_value = 
operation.external.state.transition.post_value = INITIALIZED
operation.external.state.transition.condition = returnValue && !IS_ERR(returnValue) && returnValue->d_inode


# State transition of dentry on which inode is found
operation.external.state.transition.prefix = DENTRY_MODEL_STATE
operation.external.state.transition.object = dentry
operation.external.state.transition.pre_value = 
operation.external.state.transition.post_value = POSITIVE
operation.external.state.transition.condition = !returnValue && dentry->d_inode

# State transition of dentry on which new inode is found
operation.external.state.transition.prefix = DENTRY_MODEL_STATE
operation.external.state.transition.object = returnValue
operation.external.state.transition.pre_value = 
operation.external.state.transition.post_value = POSITIVE
operation.external.state.transition.condition = returnValue && !IS_ERR(returnValue) && returnValue->d_inode


[group]
operation.name = link
operation.returnType = int

operation.arg.type = struct dentry *
operation.arg.name = old_dentry

operation.arg.type = struct inode *
operation.arg.name = dir

operation.arg.type = struct dentry *
operation.arg.name = new_dentry

operation.object = dir

operation.state.value = INITIALIZED

operation.code.pre=>>
	i_mutex_lock(tid, pc, dir);
	/* Also lock inode for which link is created */
	i_mutex_lock(tid, pc, old_dentry->d_inode);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, old_dentry->d_inode);
	i_mutex_unlock(tid, pc, dir);
<<

# State transition of link inode created
operation.external.state.transition.prefix = INODE_MODEL_STATE
operation.external.state.transition.object = new_dentry->d_inode
operation.external.state.transition.pre_value = 
operation.external.state.transition.post_value = INITIALIZED
operation.external.state.transition.condition = !returnValue


# State transition of dentry on which link is created
operation.external.state.transition.prefix = DENTRY_MODEL_STATE
operation.external.state.transition.object = new_dentry
operation.external.state.transition.pre_value = NEGATIVE
operation.external.state.transition.post_value = POSITIVE
operation.external.state.transition.condition = !returnValue


[group]
operation.name = unlink
operation.returnType = int

operation.arg.type = struct inode *
operation.arg.name = dir

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.object = dir

operation.state.value = INITIALIZED

operation.code.pre=>>
	i_mutex_lock(tid, pc, dir);
	/* Also lock inode deleted */
	i_mutex_lock(tid, pc, dentry->d_inode);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, dentry->d_inode);
	i_mutex_unlock(tid, pc, dir);
<<


# State transition of dentry from which inode is deleted
# Really, inode is not deleted here, but operation shouldn't be concurrent
# with others.
operation.external.state.transition.prefix = DENTRY_MODEL_STATE
operation.external.state.transition.object = dentry
operation.external.state.transition.pre_value = POSITIVE
operation.external.state.transition.post_value = POSITIVE
operation.external.state.transition.condition = 1


[group]
operation.name = symlink
operation.returnType = int

operation.arg.type = struct inode *
operation.arg.name = dir

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = const char *
operation.arg.name = oldname

operation.object = dir

operation.state.value = INITIALIZED

operation.code.pre=>>
	i_mutex_lock(tid, pc, dir);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, dir);
<<

# State transition of symlink inode created
operation.external.state.transition.prefix = INODE_MODEL_STATE
operation.external.state.transition.object = dentry->d_inode
operation.external.state.transition.pre_value = 
operation.external.state.transition.post_value = INITIALIZED
operation.external.state.transition.condition = !returnValue


# State transition of dentry on which symlink is created
operation.external.state.transition.prefix = DENTRY_MODEL_STATE
operation.external.state.transition.object = dentry
operation.external.state.transition.pre_value = NEGATIVE
operation.external.state.transition.post_value = POSITIVE
operation.external.state.transition.condition = !returnValue


[group]
operation.name = mkdir
operation.returnType = int

operation.arg.type = struct inode *
operation.arg.name = dir

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = int
operation.arg.name = mode

operation.object = dir

operation.state.value = INITIALIZED

operation.code.pre=>>
	i_mutex_lock(tid, pc, dir);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, dir);
<<

# State transition of directory inode created
operation.external.state.transition.prefix = INODE_MODEL_STATE
operation.external.state.transition.object = dentry->d_inode
operation.external.state.transition.pre_value = 
operation.external.state.transition.post_value = INITIALIZED
operation.external.state.transition.condition = !returnValue


# State transition of dentry on which directory is created
operation.external.state.transition.prefix = DENTRY_MODEL_STATE
operation.external.state.transition.object = dentry
operation.external.state.transition.pre_value = NEGATIVE
operation.external.state.transition.post_value = POSITIVE
operation.external.state.transition.condition = !returnValue



[group]
operation.name = rmdir
operation.returnType = int

operation.arg.type = struct inode *
operation.arg.name = dir

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.object = dir

operation.state.value = INITIALIZED

operation.code.pre=>>
	i_mutex_lock(tid, pc, dir);
	/* Also lock inode deleted */
	i_mutex_lock(tid, pc, dentry->d_inode);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, dentry->d_inode);
	i_mutex_unlock(tid, pc, dir);
<<

# State transition of dentry from which inode is deleted
# Really, inode is not deleted here, but operation shouldn't be concurrent
# with others.
operation.external.state.transition.prefix = DENTRY_MODEL_STATE
operation.external.state.transition.object = dentry
operation.external.state.transition.pre_value = POSITIVE
operation.external.state.transition.post_value = POSITIVE
operation.external.state.transition.condition = 1


[group]
operation.name = mknod
operation.returnType = int

operation.arg.type = struct inode *
operation.arg.name = dir

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = int
operation.arg.name = mode

operation.arg.type = dev_t
operation.arg.name = dev

operation.object = dir

operation.state.value = INITIALIZED

operation.code.pre=>>
	i_mutex_lock(tid, pc, dir);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, dir);
<<

# State transition of node inode created
operation.external.state.transition.prefix = INODE_MODEL_STATE
operation.external.state.transition.object = dentry->d_inode
operation.external.state.transition.pre_value = 
operation.external.state.transition.post_value = INITIALIZED
operation.external.state.transition.condition = !returnValue


# State transition of dentry on which node is created
operation.external.state.transition.prefix = DENTRY_MODEL_STATE
operation.external.state.transition.object = dentry
operation.external.state.transition.pre_value = NEGATIVE
operation.external.state.transition.post_value = POSITIVE
operation.external.state.transition.condition = !returnValue



[group]
operation.name = permission
operation.returnType = int

operation.arg.type = struct inode *
operation.arg.name = inode

operation.arg.type = int
operation.arg.name = mask

operation.object = inode

operation.state.value = INITIALIZED

# Called without locks

[group]
operation.name = rename
operation.returnType = int

operation.arg.type = struct inode *
operation.arg.name = old_dir

operation.arg.type = struct dentry *
operation.arg.name = old_dentry

operation.arg.type = struct inode *
operation.arg.name = new_dir

operation.arg.type = struct dentry *
operation.arg.name = new_dentry

operation.object = old_dir

operation.state.value = INITIALIZED

#TODO: locks
#TODO: dentry and inode state transition

[group]
operation.name = readlink
operation.returnType = int

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = char __user *
operation.arg.name = buffer

operation.arg.type = int
operation.arg.name = buflen

operation.object = dentry->d_inode

operation.state.value = INITIALIZED

# Called without locks

[group]
operation.name = follow_link
operation.returnType = void*

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = struct nameidata *
operation.arg.name = nd

operation.object = dentry->d_inode

operation.state.value = INITIALIZED

# Called without locks

[group]
operation.name = put_link

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = struct nameidata *
operation.arg.name = nd

operation.arg.type = void *
operation.arg.name = cookie

operation.object = dentry->d_inode

operation.state.value = INITIALIZED

# Called without locks

[group]
operation.name = truncate

operation.arg.type = struct inode *
operation.arg.name = inode

operation.object = inode

operation.state.value = INITIALIZED

# May be only be called from setattr, which already aquire lock.
# Call may be indirect, via vmtruncate()(deprecated)

[group]
operation.name = truncate_range

operation.arg.type = struct inode *
operation.arg.name = inode

operation.arg.type = loff_t
operation.arg.name = offset

operation.arg.type = loff_t
operation.arg.name = end

operation.object = inode

operation.state.value = INITIALIZED

# Locking scheme is not documented. Is it like truncate()?

[group]
operation.name = setattr
operation.returnType = int

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = struct iattr *
operation.arg.name = attr

operation.object = dentry->d_inode

operation.state.value = INITIALIZED

operation.code.pre=>>
	i_mutex_lock(tid, pc, dentry->d_inode);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, dentry->d_inode);
<<

[group]
operation.name = getattr
operation.returnType = int

operation.arg.type = struct vfsmount *
operation.arg.name = mnt

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = struct kstat *
operation.arg.name = stat

operation.object = dentry->d_inode

operation.state.value = INITIALIZED

# Called without locks

[group]
operation.name = setxattr
operation.returnType = int

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = const char *
operation.arg.name = name

operation.arg.type = const void *
operation.arg.name = value

operation.arg.type = size_t
operation.arg.name = size

operation.arg.type = int
operation.arg.name = flags

operation.object = dentry->d_inode

operation.state.value = INITIALIZED

operation.code.pre=>>
	i_mutex_lock(tid, pc, dentry->d_inode);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, dentry->d_inode);
<<

[group]
operation.name = getxattr
operation.returnType = ssize_t

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = const char *
operation.arg.name = name

operation.arg.type = void *
operation.arg.name = value

operation.arg.type = size_t
operation.arg.name = size

operation.object = dentry->d_inode

operation.state.value = INITIALIZED

# Called without locks

[group]
operation.name = listxattr
operation.returnType = ssize_t

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = char *
operation.arg.name = list

operation.arg.type = size_t
operation.arg.name = size

operation.object = dentry->d_inode

operation.state.value = INITIALIZED

# Called without locks

[group]
operation.name = removexattr
operation.returnType = int

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = const char *
operation.arg.name = name

operation.object = dentry->d_inode

operation.state.value = INITIALIZED

operation.code.pre=>>
	i_mutex_lock(tid, pc, dentry->d_inode);
<<

operation.code.post=>>
	i_mutex_unlock(tid, pc, dentry->d_inode);
<<


[group]
operation.name = fiemap
operation.returnType = int

operation.arg.type = struct inode *
operation.arg.name = inode

operation.arg.type = struct fiemap_extent_info*
operation.arg.name = fieinfo

operation.arg.type = u64
operation.arg.name = start

operation.arg.type = u64
operation.arg.name = len

operation.object = inode

operation.state.value = INITIALIZED

# Called without locks

[group]
operation.name = fallocate
operation.returnType = long

operation.arg.type = struct inode *
operation.arg.name = inode

operation.arg.type = int
operation.arg.name = mode

operation.arg.type = loff_t
operation.arg.name = offset

operation.arg.type = loff_t
operation.arg.name = len

operation.object = inode

operation.protection = defined(INODE_OPERATIONS_HAS_FALLOCATE)

operation.state.value = INITIALIZED

# Locking scheme is not documented.